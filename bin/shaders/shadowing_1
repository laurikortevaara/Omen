/**
 * Uniforms
 */
uniform sampler2D textureMap;
uniform sampler2D shadowMap;
uniform sampler2D normalMap;

uniform mat4      ModelViewProjection;
uniform mat3	  ModelView3x3;
uniform mat4	  M; // Model Matrix
uniform mat4      V; // View Matrix

uniform mat4	  DepthBiasMVP;
uniform vec3	  LightPos;
uniform vec4	  MaterialDiffuse;
uniform int		  ShadowBlur = 1;
uniform bool	  HasTexture = false;

/**
 * Vertex Shader
 *
 */
#ifdef VERTEX_SHADER
layout(location=0) in vec3 position;
layout(location=1) in vec2 uv;
layout(location=2) in vec3 normal;
layout(location=3) in vec3 tangent;
layout(location=4) in vec3 bitangent;

out Data{
  vec3 position;
  vec3 normal;
  vec4 ShadowCoord;
  vec3 LightPos;
  vec2 uv;

  vec3 Position_worldspace;
  vec3 EyeDirection_cameraspace;
  vec3 LightDirection_cameraspace;
  vec3 Normal_cameraspace;
  vec3 Tangent_cameraspace;
  vec3 Bitangent_cameraspace;
  vec3 LightDirection_tangentspace;
  vec3 EyeDirection_tangentspace;
  mat3 TBN;
} dataOut;

void main() {
  gl_Position = ModelViewProjection * vec4(position,1);
  dataOut.ShadowCoord = DepthBiasMVP * vec4(position,1);
  dataOut.position = position;
  dataOut.normal = normal;
  dataOut.LightPos = LightPos;
  dataOut.uv = uv;

  // Position of the vertex, in worldspace : M * position
  vec3 Position_worldspace = (M * vec4(position,1)).xyz;

  // Vector that goes from the vertex to the camera, in camera space.
  // In camera space, the camera is at the origin (0,0,0).
  vec3 vertexPosition_cameraspace = ( V * M * vec4(position,1)).xyz;
  vec3 EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

  // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
  vec3 LightPosition_cameraspace = ( V * vec4(LightPos,1)).xyz;
  vec3 LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

  // Normal of the the vertex, in camera space
  vec3 Normal_cameraspace = ( V * M * vec4(normal,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

  dataOut.Position_worldspace=Position_worldspace;
  dataOut.EyeDirection_cameraspace = EyeDirection_cameraspace;
  dataOut.LightDirection_cameraspace=LightDirection_cameraspace;

  vec3 vertexNormal_cameraspace = ModelView3x3 * normalize(normal);
  vec3 vertexTangent_cameraspace = ModelView3x3 * normalize(tangent);
  vec3 vertexBitangent_cameraspace = ModelView3x3 * normalize(bitangent);

  dataOut.Normal_cameraspace=vertexNormal_cameraspace;
  dataOut.Tangent_cameraspace=vertexTangent_cameraspace;
  dataOut.Bitangent_cameraspace=vertexBitangent_cameraspace;

  mat3 TBN = transpose(mat3(
				vertexTangent_cameraspace,
				vertexBitangent_cameraspace,
				vertexNormal_cameraspace ));

  dataOut.LightDirection_tangentspace = TBN * LightDirection_cameraspace;
  dataOut.EyeDirection_tangentspace =  TBN * EyeDirection_cameraspace;
  dataOut.TBN = TBN;
}
#endif

#ifdef FRAGMENT_SHADER
/**
 * Fragment Shader
 *
 */
float texture2DCompare(sampler2D depths, vec2 uv, float compare){
    float depth = texture2D(depths, uv).r;
    return step(compare, depth);
}

float texture2DShadowLerp(sampler2D depths, vec2 size, vec2 uv, float compare){
    vec2 texelSize = vec2(1.0)/size;
    vec2 f = fract(uv*size+0.5);
    vec2 centroidUV = floor(uv*size+0.5)/size;

    float lb = texture2DCompare(depths, centroidUV+texelSize*vec2(0.0, 0.0), compare);
    float lt = texture2DCompare(depths, centroidUV+texelSize*vec2(0.0, 1.0), compare);
    float rb = texture2DCompare(depths, centroidUV+texelSize*vec2(1.0, 0.0), compare);
    float rt = texture2DCompare(depths, centroidUV+texelSize*vec2(1.0, 1.0), compare);
    float a = mix(lb, lt, f.y);
    float b = mix(rb, rt, f.y);
    float c = mix(a, b, f.x);
    return c;
}

float PCF(sampler2D depths, vec2 size, vec2 uv, float compare){
    float result = 0.0;
    for(int x=-2; x<=2; x++){
        for(int y=-2; y<=2; y++){
            vec2 off = vec2(x,y)/size;
            result += texture2DCompare(depths, uv+off, compare);
        }
    }
    return result/25.0;
}

float PCF2(sampler2D depths, vec2 size, vec2 uv, float compare){
  float result = 0.0;
	int d = ShadowBlur;
	float i=0;
    for(int x=-d; x<=d; x++){
        for(int y=-d; y<=d; y++){
            vec2 off = vec2(x,y)/size;
            result += texture2DShadowLerp(depths, size, uv+off, compare);
			i=i+1;
        }
    }
    return result/i;
}

float linstep(float low, float high, float v){
    return clamp((v-low)/(high-low), 0.0, 1.0);
}

float VSM(sampler2D depths, vec2 uv, float compare){
    vec2 moments = texture2D(depths, uv).xy;
    float p = smoothstep(compare-0.02, compare, moments.x);
    float variance = max(moments.y - moments.x*moments.x, -0.001);
    float d = compare - moments.x;
    float p_max = linstep(0.2, 1.0, variance / (variance + d*d));
    return clamp(max(p, p_max), 0.0, 1.0);
}

in Data {
  vec3 position;
  vec3 normal;
  vec4 ShadowCoord;
  vec3 LightPos;
  vec2 uv;
  vec3 Position_worldspace;
  vec3 EyeDirection_cameraspace;
  vec3 LightDirection_cameraspace;
  vec3 Normal_cameraspace;
  vec3 Tangent_cameraspace;
  vec3 Bitangent_cameraspace;
  vec3 LightDirection_tangentspace;
  vec3 EyeDirection_tangentspace;
  mat3 TBN;
} dataIn;

out vec4 out_color;

void main() {
	vec3 vpos = dataIn.position;
	vec4 ShadowCoord = dataIn.ShadowCoord;
	vec2 uv = dataIn.uv;

	vec3 Position_worldspace = dataIn.Position_worldspace;
	vec3 EyeDirection_cameraspace = dataIn.EyeDirection_cameraspace;
	vec3 LightDirection_cameraspace = dataIn.LightDirection_cameraspace;
	vec3 Normal_cameraspace = dataIn.Normal_cameraspace;
	vec3 Tangent_cameraspace = dataIn.Tangent_cameraspace;
	vec3 Bitangent_cameraspace = dataIn.Bitangent_cameraspace;

	float visibility = 1.0;
	float bias = 0.005;
	//visibility = texture2DShadowLerp( shadowMap, vec2(4096,4096), ShadowCoord.xy, ShadowCoord.z-bias);
	visibility = PCF2( shadowMap, vec2(4096,4096), ShadowCoord.xy, ShadowCoord.z-bias);
	//visibility = max(visibility, 0.25);
	/*if ( texture( shadowMap, ShadowCoord.xy ).z  < ShadowCoord.z - bias){
		visibility = 0.5;
	}*/

	float d = clamp(dot(dataIn.normal,normalize(dataIn.LightPos)),0.25,1.0);
	vec4 color = MaterialDiffuse*d;
	if(HasTexture)
		color = texture(textureMap,uv)*d;
	//out_color = visibility*color*clamp((20.0/dataIn.LightPos.y), 0.001,1.0);
	out_color = visibility*color; //*clamp((20.0/dataIn.LightPos.y), 0.001,1.0);

	float distance = length(dataIn.LightPos-Position_worldspace);

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );

	vec3 TextureNormal_tangentspace = normalize(texture( normalMap, uv ).rgb*2.0 - 1.0);
	n = TextureNormal_tangentspace;
	//n = normalize(dataIn.TBN * n);

	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( dataIn.LightDirection_tangentspace );

	// Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);

    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l,n);

    // Cosine of the angle between the Eye vector and the Reflect vector,
    //  clamped to 0
    //   - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = clamp( dot( normalize(dataIn.EyeDirection_tangentspace),R ), 0,12 );

	float LightPower = 1.0f;
	out_color = visibility*texture(textureMap,uv); //*(clamp(dot(normalize(l),normalize(-n)),0,1)+LightPower*cosAlpha);
	out_color.a = 1;
}


#endif
// END
